<?php

/**
 * @author Marc MOREAU <moreau.marc.web@gmail.com>
 * @license https://github.com/MockingMagician/coinbase-pro-sdk/blob/master/LICENSE.md MIT
 * @link https://github.com/MockingMagician/coinbase-pro-sdk/blob/master/README.md
 */

namespace MockingMagician\CoinbaseProSdk\Tests\Exp;

use Amp\Coroutine;
use MockingMagician\CoinbaseProSdk\CoinbaseFacade;
use MockingMagician\CoinbaseProSdk\Functional\Api\CoinbaseApi;
use MockingMagician\CoinbaseProSdk\Functional\Api\Config\CoinbaseConfig;
use MockingMagician\CoinbaseProSdk\Functional\Api\Config\ConnectivityConfig;
use MockingMagician\CoinbaseProSdk\Functional\Api\Config\Params;
use MockingMagician\CoinbaseProSdk\Functional\Websocket\Message\StatusMessage;
use MockingMagician\CoinbaseProSdk\Functional\Websocket\Message\SubscriptionsMessage;
use MockingMagician\CoinbaseProSdk\Functional\Websocket\Subscriber;
use MockingMagician\CoinbaseProSdk\Tests\Func\Connectivity\AbstractTest;
use function Amp\Promise\wait;
use function Amp\Websocket\Client\connect;
use Amp\Websocket\Client\Connection;
use Composer\InstalledVersions;
use Dotenv\Dotenv;
use MockingMagician\CoinbaseProSdk\Contracts\Websocket\SubscriberInterface;
use MockingMagician\CoinbaseProSdk\Functional\Misc\Json;
use MockingMagician\CoinbaseProSdk\Functional\Misc\Signer;
use MockingMagician\CoinbaseProSdk\Functional\Websocket\Message\ChangeMessage;
use MockingMagician\CoinbaseProSdk\Functional\Websocket\MessageHandler;
use PHPUnit\Framework\TestCase;

/**
 * @internal
 */
class WSSimpleClientExpTest extends TestCase
{
    /**
     * @var WSSimpleClient
     */
    private $coinbaseSocket;
    /**
     * @var string
     */
    private $subscriber;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        try {
            $dotenv = Dotenv::createImmutable(__DIR__.'/../..');
            $dotenv->load();
        } catch (\Throwable $exception) {
            // We don't care, it is just a way between a lot to load envs
        }

        $coinbaseApi = CoinbaseFacade::createDefaultCoinbaseApi(
            AbstractTest::API_TEST_ENDPOINT,
            getenv('API_KEY_REAL_FOR_WEBSOCKET'),
            getenv('API_SECRET_REAL_FOR_WEBSOCKET'),
            getenv('API_PASSPHRASE_REAL_FOR_WEBSOCKET')
        );

        $this->subscriber = new Subscriber($coinbaseApi);
        $this->subscriber->setProductIds([
            'BTC-EUR',
            'XML-EUR',
            'XTZ-EUR',
            'NU-EUR',
            'ETH-EUR',
        ]);
        $this->subscriber->activateChannelFull(true);
        $this->subscriber->activateChannelHeartbeat(true);
        $this->subscriber->activateChannelLevel2(true);
        $this->subscriber->activateChannelMatches(true);
        $this->subscriber->activateChannelStatus(true);
        $this->subscriber->activateChannelTicker(true);
        $this->subscriber->runWithAuthentication(true);
        $this->subscriber->activateChannelUser(true);

        dump(Json::decode($this->subscriber->getPayload()));
    }

    public function testConnection()
    {
//        dump(InstalledVersions::getReference('amphp/websocket-client'));die;
        /** @var Coroutine $connection */
        $connection = connect('wss://ws-feed.pro.coinbase.com');
        $connection = wait($connection);
        // @var Connection $connection
        wait($connection->send($this->subscriber->getPayload()));
        $i = 0;
        while (++$i < 5000 || true) {
            try {
                dump($i);
                $message = wait($connection->receive());
                $payload = wait($message->buffer());
                $message = MessageHandler::handle(Json::decode($payload, true));
                if ($message instanceof StatusMessage) {
                    dump($message);
                    die;
                }
                usleep(1000);
            } catch (\Throwable $exception) {
                dump($payload);

                throw $exception;
            }
        }
        $connection->close();
    }
}
